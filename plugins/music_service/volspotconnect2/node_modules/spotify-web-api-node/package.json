{
  "_args": [
    [
      {
        "raw": "spotify-web-api-node@git+https://github.com/ashthespy/spotify-web-api-node.git",
        "scope": null,
        "escapedName": "spotify-web-api-node",
        "name": "spotify-web-api-node",
        "rawSpec": "git+https://github.com/ashthespy/spotify-web-api-node.git",
        "spec": "git+https://github.com/ashthespy/spotify-web-api-node.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ashthespy/spotify-web-api-node.git",
          "sshUrl": "git+ssh://git@github.com/ashthespy/spotify-web-api-node.git",
          "httpsUrl": "git+https://github.com/ashthespy/spotify-web-api-node.git",
          "gitUrl": "git://github.com/ashthespy/spotify-web-api-node.git",
          "shortcut": "github:ashthespy/spotify-web-api-node",
          "directUrl": "https://raw.githubusercontent.com/ashthespy/spotify-web-api-node/master/package.json"
        }
      },
      "/home/volumio/volumio-plugins/plugins/music_service/volspotconnect2"
    ]
  ],
  "_from": "git+https://github.com/ashthespy/spotify-web-api-node.git",
  "_id": "spotify-web-api-node@3.0.0",
  "_inCache": true,
  "_location": "/spotify-web-api-node",
  "_phantomChildren": {},
  "_requested": {
    "raw": "spotify-web-api-node@git+https://github.com/ashthespy/spotify-web-api-node.git",
    "scope": null,
    "escapedName": "spotify-web-api-node",
    "name": "spotify-web-api-node",
    "rawSpec": "git+https://github.com/ashthespy/spotify-web-api-node.git",
    "spec": "git+https://github.com/ashthespy/spotify-web-api-node.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ashthespy/spotify-web-api-node.git",
      "sshUrl": "git+ssh://git@github.com/ashthespy/spotify-web-api-node.git",
      "httpsUrl": "git+https://github.com/ashthespy/spotify-web-api-node.git",
      "gitUrl": "git://github.com/ashthespy/spotify-web-api-node.git",
      "shortcut": "github:ashthespy/spotify-web-api-node",
      "directUrl": "https://raw.githubusercontent.com/ashthespy/spotify-web-api-node/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/ashthespy/spotify-web-api-node.git#81e75392b9821488433dabd2362533c70f306506",
  "_shasum": "fb5ae644120321218c4c256ab4eb80a7839b6fe9",
  "_shrinkwrap": null,
  "_spec": "spotify-web-api-node@git+https://github.com/ashthespy/spotify-web-api-node.git",
  "_where": "/home/volumio/volumio-plugins/plugins/music_service/volspotconnect2",
  "author": {
    "name": "Michael Thelin"
  },
  "browser": {
    "./src/server.js": "./src/client.js"
  },
  "bugs": {
    "url": "https://github.com/thelinmichael/spotify-web-api-node/issues"
  },
  "config": {
    "blanket": {
      "pattern": "src",
      "data-cover-never": "node_modules"
    }
  },
  "dependencies": {
    "superagent": "^2.0.0"
  },
  "description": "A Node.js wrapper for Spotify's Web API",
  "devDependencies": {
    "blanket": "^1.1.7",
    "coveralls": "^2.11.2",
    "grunt": "^1.0.1",
    "grunt-contrib-jshint": "~0.11.0",
    "grunt-contrib-watch": "~0.6",
    "grunt-simple-mocha": "0.4.x",
    "mocha": "~1.20.1",
    "mocha-lcov-reporter": "0.0.2",
    "mockery": "^1.4.0",
    "should": "~3.0",
    "sinon": "~1.12.2",
    "xunit-file": "0.0.5"
  },
  "gitHead": "81e75392b9821488433dabd2362533c70f306506",
  "homepage": "https://github.com/thelinmichael/spotify-web-api-node",
  "keywords": [
    "spotify",
    "echonest",
    "music",
    "api",
    "wrapper",
    "client",
    "web api"
  ],
  "license": "MIT",
  "main": "./src/server.js",
  "name": "spotify-web-api-node",
  "optionalDependencies": {},
  "readme": "Spotify Web API Node\n==================\n\n[![Tests](https://travis-ci.org/thelinmichael/spotify-web-api-node.svg?branch=master)](https://travis-ci.org/thelinmichael/spotify-web-api-node)\n[![Coverage Status](https://coveralls.io/repos/thelinmichael/spotify-web-api-node/badge.svg)](https://coveralls.io/r/thelinmichael/spotify-web-api-node)\n\nThis is a universal wrapper/client for the [Spotify Web API](https://developer.spotify.com/web-api/) that runs on Node.JS and the browser, using [browserify](http://browserify.org/)/[webpack](https://webpack.github.io/)/[rollup](http://rollupjs.org/). A list of selected wrappers for different languages and environments is available at the Developer site's [Libraries page](https://developer.spotify.com/web-api/code-examples/).\n\nProject owners are [thelinmichael](https://github.com/thelinmichael) and [JMPerez](https://github.com/JMPerez), with help from [a lot of awesome contributors](https://github.com/thelinmichael/spotify-web-api-node/network/members).\n\nIt includes helper functions to do the following:\n\n#### Music metadata\n- Albums, artists, and tracks\n- Audio features and analysis for tracks\n- Albums for a specific artist\n- Top tracks for a specific artist\n- Artists similar to a specific artist\n\n#### Profiles\n- User's emails, product type, display name, birthdate, image\n\n#### Search\n- Albums, artists, tracks, and playlists\n\n#### Playlist manipulation\n- Get a user's playlists\n- Create playlists\n- Change playlist details\n- Add tracks to a playlist\n- Remove tracks from a playlist\n- Replace tracks in a playlist\n- Reorder tracks in a playlist\n\n#### Your Music library\n- Add, remove, and get tracks and albums that are in the signed in user's Your Music library\n- Check if a track or album is in the signed in user's Your Music library\n\n#### Personalization\n- Get a user’s top artists and tracks based on calculated affinity\n- Get current user’s recently played tracks\n\n#### Browse\n- Get New Releases\n- Get Featured Playlists\n- Get a List of Categories\n- Get a Category\n- Get a Category's Playlists\n- Get recommendations based on seeds\n- Get available genre seeds\n\n#### Follow\n- Follow and unfollow users\n- Follow and unfollow artists\n- Check if the logged in user follows a user or artist\n- Follow a playlist\n- Unfollow a playlist\n- Get followed artists\n- Check if users are following a Playlist\n\n#### Player\n - Get a user's available devices\n - Get information about the user's current playback\n - Transfer a user's playback\n - Resume a user's playback\n - Skip a user's playback to next track\n - Skip a user's playback to previous track\n - Set a user's shuffle mode\n - Set a user's repeat mode\n\nAll methods require authentication, which can be done using these flows:\n\n- [Client credentials flow](http://tools.ietf.org/html/rfc6749#section-4.4) (Application-only authentication)\n- [Authorization code grant](http://tools.ietf.org/html/rfc6749#section-4.1) (Signed by user)\n\n##### Dependencies\n\nThis project depends on [superagent](https://github.com/visionmedia/superagent) to make HTTP requests, and [promise](https://github.com/then/promise) as its [Promises/A+](http://promises-aplus.github.io/promises-spec/) implementation.\n\n## Installation\n\n    $ npm install spotify-web-api-node --save\n\n## Usage\n\nFirst, instantiate the wrapper.\n```javascript\nvar SpotifyWebApi = require('spotify-web-api-node');\n\n// credentials are optional\nvar spotifyApi = new SpotifyWebApi({\n  clientId : 'fcecfc72172e4cd267473117a17cbd4d',\n  clientSecret : 'a6338157c9bb5ac9c71924cb2940e1a7',\n  redirectUri : 'http://www.example.com/callback'\n});\n```\n\nIf you've got an access token and want to use it for all calls, simply use the api object's set method. Handling credentials is described in detail in the Authorization section.\n```javascript\nspotifyApi.setAccessToken('<your_access_token>');\n```\n\nLastly, use the wrapper's helper methods to make the request to Spotify's Web API. The wrapper uses promises, so you need to provide a success callback as well as an error callback.\n```javascript\n// Get Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\nIf you dont wan't to use promises, you can provide a callback method instead.\n```javascript\n// Get Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', { limit: 10, offset: 20 }, function(err, data) {\n  if (err) {\n    console.error('Something went wrong!');\n  } else {\n    console.log(data.body);\n  }\n});\n```\n\nThe functions that fetch data from the API also accept a JSON object with a set of options. For example, limit and offset can be used in functions that returns paginated results, such as search and retrieving an artist's albums.\n\nNote that the **options** parameter is currently **required if you're using callback methods**.\n\n```javascript\n// Passing a callback - get Elvis' albums in range [20...29]\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10, offset: 20})\n  .then(function(data) {\n    console.log('Album information', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n```\n\n### Response body, statuscode, and headers\nTo enable caching, this wrapper now exposes the response headers and not just the response body. Since version 2.0.0, the response object has the format\n\n```json\n{\n  \"body\" : {\n\n  },\n  \"headers\" : {\n\n  },\n  \"statusCode\" :\n}\n```\n\nIn previous versions, the response object was the same as the response body.\n\n#### Example of a response\n\nRetrieving a track's metadata in `spotify-web-api-node` version 1.4.0 and later\n\n```json\n{\n  \"body\":\n  {\n    \"name\": \"Golpe Maestro\",\n    \"popularity\": 42,\n    \"preview_url\": \"https://p.scdn.co/mp3-preview/4ac44a56e3a4b7b354c1273d7550bbad38c51f5d\",\n    \"track_number\": 1,\n    \"type\": \"track\",\n    \"uri\": \"spotify:track:3Qm86XLflmIXVm1wcwkgDK\"\n  },\n  \"headers\": {\n    \"date\": \"Fri, 27 Feb 2015 09:25:48 GMT\",\n    \"content-type\": \"application/json; charset=utf-8\",\n    \"cache-control\": \"public, max-age=7200\",\n  },\n  \"statusCode\": 200\n}\n```\n\nThe response object for the same request in earlier versions than to 2.0.0.\n```json\n{\n    \"name\": \"Golpe Maestro\",\n    \"popularity\": 42,\n    \"preview_url\": \"https://p.scdn.co/mp3-preview/4ac44a56e3a4b7b354c1273d7550bbad38c51f5d\",\n    \"track_number\": 1,\n    \"type\": \"track\",\n    \"uri\": \"spotify:track:3Qm86XLflmIXVm1wcwkgDK\"\n  }\n```\n\n\n### More examples\n\nBelow are examples for all helper functions. Longer examples of some requests can be found in the [examples folder](examples/).\n\nPlease note that since version 1.3.2 all methods accept an optional callback method as their last parameter. These examples however only use promises.\n\n```javascript\nvar SpotifyWebApi = require('spotify-web-api-node');\n\nvar spotifyApi = new SpotifyWebApi();\n\n// Get multiple albums\nspotifyApi.getAlbums(['5U4W9E5WsYb2jUQWePT8Xm', '3KyVcddATClQKIdtaap4bV'])\n  .then(function(data) {\n    console.log('Albums information', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get an artist\nspotifyApi.getArtist('2hazSY4Ef3aB9ATXW7F5w3')\n  .then(function(data) {\n    console.log('Artist information', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get multiple artists\nspotifyApi.getArtists(['2hazSY4Ef3aB9ATXW7F5w3', '6J6yx1t3nwIDyPXk5xa7O8'])\n  .then(function(data) {\n    console.log('Artists information', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Get albums by a certain artist\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE')\n  .then(function(data) {\n    console.log('Artist albums', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search tracks whose name, album or artist contains 'Love'\nspotifyApi.searchTracks('Love')\n  .then(function(data) {\n    console.log('Search by \"Love\"', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search artists whose name contains 'Love'\nspotifyApi.searchArtists('Love')\n  .then(function(data) {\n    console.log('Search artists by \"Love\"', data.body);\n  }, function(err) {\n    console.error(err);\n  });\n\n// Search tracks whose artist's name contains 'Love'\nspotifyApi.searchTracks('artist:Love')\n  .then(function(data) {\n    console.log('Search tracks by \"Love\" in the artist name', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Search tracks whose artist's name contains 'Kendrick Lamar', and track name contains 'Alright'\nspotifyApi.searchTracks('track:Alright artist:Kendrick Lamar')\n  .then(function(data) {\n    console.log('Search tracks by \"Alright\" in the track name and \"Kendrick Lamar\" in the artist name', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n\n// Search playlists whose name or description contains 'workout'\nspotifyApi.searchPlaylists('workout')\n  .then(function(data) {\n    console.log('Found playlists are', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get tracks in an album\nspotifyApi.getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 })\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get an artist's top tracks\nspotifyApi.getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB')\n  .then(function(data) {\n    console.log(data.body);\n    }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get artists related to an artist\nspotifyApi.getArtistRelatedArtists('0qeei9KQnptjwb8MgkqEoy')\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    done(err);\n  });\n\n/* Get Audio Features for a Track */\nspotifyApi.getAudioFeaturesForTrack('3Qm86XLflmIXVm1wcwkgDK')\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    done(err);\n  });\n\n/* Get Audio Analysis for a Track */\nspotifyApi.getAudioAnalysisForTrack('3Qm86XLflmIXVm1wcwkgDK')\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    done(err);\n  });\n\n/* Get Audio Features for several tracks */\nspotifyApi.getAudioFeaturesForTracks(['4iV5W9uYEdYUVa79Axb7Rh', '3Qm86XLflmIXVm1wcwkgDK'])\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    done(err);\n  });\n\n\n/*\n * User methods\n */\n\n// Get a user\nspotifyApi.getUser('petteralexis')\n  .then(function(data) {\n    console.log('Some information about this user', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get the authenticated user\nspotifyApi.getMe()\n  .then(function(data) {\n    console.log('Some information about the authenticated user', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n/*\n * Playlist methods\n */\n\n// Get a playlist\nspotifyApi.getPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK')\n  .then(function(data) {\n    console.log('Some information about this playlist', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Get a user's playlists\nspotifyApi.getUserPlaylists('thelinmichael')\n  .then(function(data) {\n    console.log('Retrieved playlists', data.body);\n  },function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Create a private playlist\nspotifyApi.createPlaylist('thelinmichael', 'My Cool Playlist', { 'public' : false })\n  .then(function(data) {\n    console.log('Created playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Add tracks to a playlist\nspotifyApi.addTracksToPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"])\n  .then(function(data) {\n    console.log('Added tracks to playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Add tracks to a specific position in a playlist\nspotifyApi.addTracksToPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"],\n  {\n    position : 5\n  })\n  .then(function(data) {\n    console.log('Added tracks to playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Remove tracks from a playlist at a specific position\nspotifyApi.removeTracksFromPlaylistByPosition('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', [0, 2, 130], \"0wD+DKCUxiSR/WY8lF3fiCTb7Z8X4ifTUtqn8rO82O4Mvi5wsX8BsLj7IbIpLVM9\")\n  .then(function(data) {\n    console.log('Tracks removed from playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Remove all occurrence of a track\nvar tracks = [{ uri : \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" }];\nvar options = { snapshot_id : \"0wD+DKCUxiSR/WY8lF3fiCTb7Z8X4ifTUtqn8rO82O4Mvi5wsX8BsLj7IbIpLVM9\" };\nspotifyApi.removeTracksFromPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', tracks, options)\n  .then(function(data) {\n    console.log('Tracks removed from playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Reorder the first two tracks in a playlist to the place before the track at the 10th position\nvar options = { \"range_length\" : 2 };\nspotifyApi.reorderTracksInPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', 0, 10, options)\n  .then(function(data) {\n    console.log('Tracks reordered in playlist!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Change playlist details\nspotifyApi.changePlaylistDetails('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK',\n  {\n    name: 'This is a new name for my Cool Playlist, and will become private',\n    'public' : false\n  }).then(function(data) {\n     console.log('Playlist is now private!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Upload a custom playlist cover image\nspotifyApi.uploadCustomPlaylistCoverImage('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK','longbase64uri')\n  .then(function(data) {\n     console.log('Playlsit cover image uploaded!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Follow a playlist (privately)\nspotifyApi.followPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK',\n  {\n    'public' : false\n  }).then(function(data) {\n     console.log('Playlist successfully followed privately!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Unfollow a playlist\nspotifyApi.unfollowPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK')\n  .then(function(data) {\n     console.log('Playlist successfully unfollowed!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Check if Users are following a Playlist\nspotifyApi.areFollowingPlaylist('thelinmichael', '5ieJqeLJjjI8iJWaxeBLuK', ['thelinmichael', 'ella'])\n .then(function(data) {\n    data.body.forEach(function(isFollowing) {\n      console.log(\"User is following: \" + isFollowing);\n    });\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n/*\n * Following Users and Artists methods\n */\n\n/* Get followed artists */\nspotifyApi.getFollowedArtists({ limit : 1 })\n  .then(function(data) {\n    // 'This user is following 1051 artists!'\n    console.log('This user is following ', data.body.artists.total, ' artists!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n/* Follow a user */\n// TBD.\n\n/* Follow an artist */\n// TBD.\n\n/* Unfollow a user */\n// TBD\n\n/* Unfollow an artist */\n// TBD\n\n/* Check if a user is following a user */\n// TBD\n\n/* Check if a user is following an artist */\n// TBD\n\n/*\n * Your Music library methods\n */\n\n/* Tracks */\n\n// Get tracks in the signed in user's Your Music library\nspotifyApi.getMySavedTracks({\n    limit : 2,\n    offset: 1\n  })\n  .then(function(data) {\n    console.log('Done!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n\n// Check if tracks are in the signed in user's Your Music library\nspotifyApi.containsMySavedTracks([\"5ybJm6GczjQOgTqmJ0BomP\"])\n  .then(function(data) {\n\n    // An array is returned, where the first element corresponds to the first track ID in the query\n    var trackIsInYourMusic = data.body[0];\n\n    if (trackIsInYourMusic) {\n      console.log('Track was found in the user\\'s Your Music library');\n    } else {\n      console.log('Track was not found.');\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Remove tracks from the signed in user's Your Music library\nspotifyApi.removeFromMySavedTracks([\"3VNWq8rTnQG6fM1eldSpZ0\"])\n  .then(function(data) {\n    console.log('Removed!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n// Add tracks to the signed in user's Your Music library\nspotifyApi.addToMySavedTracks([\"3VNWq8rTnQG6fM1eldSpZ0\"])\n  .then(function(data) {\n    console.log('Added track!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n/* Albums */\n\n// Get albums in the signed in user's Your Music library\nspotifyApi.getMySavedAlbums({\n    limit : 1,\n    offset: 0\n  })\n  .then(function(data) {\n    // Output items\n    console.log(data.body.items);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n\n// Check if albums are in the signed in user's Your Music library\nspotifyApi.containsMySavedAlbums([\"1H8AHEB8VSE8irHViGOIrF\"])\n  .then(function(data) {\n\n    // An array is returned, where the first element corresponds to the first album ID in the query\n    var albumIsInYourMusic = data.body[0];\n\n    if (albumIsInYourMusic) {\n      console.log('Album was found in the user\\'s Your Music library');\n    } else {\n      console.log('Album was not found.');\n    }\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n\n// Remove albums from the signed in user's Your Music library\nspotifyApi.removeFromMySavedAlbums([\"1H8AHEB8VSE8irHViGOIrF\"])\n  .then(function(data) {\n    console.log('Removed!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n// Add albums to the signed in user's Your Music library\nspotifyApi.addToMySavedAlbums([\"1H8AHEB8VSE8irHViGOIrF\"])\n  .then(function(data) {\n    console.log('Added album!');\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n});\n\n\n/*\n * Browse methods\n */\n\n  // Retrieve new releases\nspotifyApi.getNewReleases({ limit : 5, offset: 0, country: 'SE' })\n  .then(function(data) {\n    console.log(data.body);\n      done();\n    }, function(err) {\n       console.log(\"Something went wrong!\", err);\n    });\n  });\n\n//  Retrieve featured playlists\nspotifyApi.getFeaturedPlaylists({ limit : 3, offset: 1, country: 'SE', locale: 'sv_SE', timestamp:'2014-10-23T09:00:00' })\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log(\"Something went wrong!\", err);\n  });\n\n// Get a List of Categories\nspotifyApi.getCategories({\n      limit : 5,\n      offset: 0,\n      country: 'SE',\n      locale: 'sv_SE'\n  })\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log(\"Something went wrong!\", err);\n  });\n\n// Get a Category (in Sweden)\nspotifyApi.getCategory('party', {\n      country: 'SE',\n      locale: 'sv_SE'\n  })\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log(\"Something went wrong!\", err);\n  });\n\n// Get Playlists for a Category (Party in Brazil)\nspotifyApi.getPlaylistsForCategory('party', {\n      country: 'BR',\n      limit : 2,\n      offset : 0\n    })\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log(\"Something went wrong!\", err);\n  });\n  \n  \n  \n/* Player */\n\n// Get information about current playing song for signed in user\nspotifyApi.getMyCurrentPlaybackState({\n  })\n  .then(function(data) {\n    // Output items\n    console.log(\"Now Playing: \",data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n/* Get Recommendations Based on Seeds */\n// TBD\n\n\n/**\n * Personalization Endpoints\n */\n\n/* Get a User’s Top Artists and Tracks */\n// TBD\n\nGet a User’s Top Artists and Tracks\n```\n\n### Nesting calls\n```javascript\n// track detail information for album tracks\nspotifyApi.getAlbum('5U4W9E5WsYb2jUQWePT8Xm')\n  .then(function(data) {\n    return data.body.tracks.map(function(t) { return t.id; });\n  })\n  .then(function(trackIds) {\n    return spotifyApi.getTracks(trackIds);\n  })\n  .then(function(data) {\n    console.log(data.body);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n\n  // album detail for the first 10 Elvis' albums\nspotifyApi.getArtistAlbums('43ZHCT0cAZBISjO8DG9PnE', {limit: 10})\n  .then(function(data) {\n    return data.body.albums.map(function(a) { return a.id; });\n  })\n  .then(function(albums) {\n    return spotifyApi.getAlbums(albums);\n  }).then(function(data) {\n    console.log(data.body);\n  });\n```\n\n### Authorization\n\nSupplying an access token is required for all requests to the Spotify API. This wrapper supports two authorization flows - The Authorization Code flow (signed by a user), and the Client Credentials flow (application authentication - the user isn't involved). See Spotify's [Authorization guide](https://developer.spotify.com/spotify-web-api/authorization-guide/) for detailed information on these flows.\n\n**Important: If you are writing a universal/isomorphic web app using this library, you will not be able to use those methods that send a client secret to the Spotify authorization service. Client secrets should be kept server-side and not exposed. Never include your client secret in the public JS served to the browser.**\n\nThe first thing you need to do is to [create an application](https://developer.spotify.com/my-applications/). A step-by-step tutorial is offered by Spotify in this [tutorial](https://developer.spotify.com/spotify-web-api/tutorial/).\n\n#### Authorization code flow\n\nWith the application created and its redirect URI set, the only thing necessary for the application to retrieve an **authorization code** is the user's permission. Which permissions you're able to ask for is documented in Spotify's [Using Scopes section](https://developer.spotify.com/spotify-web-api/using-scopes/).\n\nIn order to get permissions, you need to direct the user to our Accounts service. Generate the URL by using the wrapper's authorization URL method.\n\n```javascript\nvar scopes = ['user-read-private', 'user-read-email'],\n    redirectUri = 'https://example.com/callback',\n    clientId = '5fe01282e44241328a84e7c5cc169165',\n    state = 'some-state-of-my-choice';\n\n// Setting credentials can be done in the wrapper's constructor, or using the API object's setters.\nvar spotifyApi = new SpotifyWebApi({\n  redirectUri : redirectUri,\n  clientId : clientId\n});\n\n// Create the authorization URL\nvar authorizeURL = spotifyApi.createAuthorizeURL(scopes, state);\n\n// https://accounts.spotify.com:443/authorize?client_id=5fe01282e44241328a84e7c5cc169165&response_type=code&redirect_uri=https://example.com/callback&scope=user-read-private%20user-read-email&state=some-state-of-my-choice\nconsole.log(authorizeURL);\n```\n\nThe example below uses a hardcoded authorization code, retrieved from the Accounts service as described above.\n\n```javascript\nvar credentials = {\n  clientId : 'someClientId',\n  clientSecret : 'someClientSecret',\n  redirectUri : 'http://www.michaelthelin.se/test-callback'\n};\n\nvar spotifyApi = new SpotifyWebApi(credentials);\n\n// The code that's returned as a query parameter to the redirect URI\nvar code = 'MQCbtKe23z7YzzS44KzZzZgjQa621hgSzHN';\n\n// Retrieve an access token and a refresh token\nspotifyApi.authorizationCodeGrant(code)\n  .then(function(data) {\n    console.log('The token expires in ' + data.body['expires_in']);\n    console.log('The access token is ' + data.body['access_token']);\n    console.log('The refresh token is ' + data.body['refresh_token']);\n\n    // Set the access token on the API object to use it in later calls\n    spotifyApi.setAccessToken(data.body['access_token']);\n    spotifyApi.setRefreshToken(data.body['refresh_token']);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\nSince the access token was set on the api object in the previous success callback, **it's going to be used in future calls**. As it was retrieved using the Authorization Code flow, it can also be refreshed unless it has expired.\n\n```javascript\n// clientId, clientSecret and refreshToken has been set on the api object previous to this call.\nspotifyApi.refreshAccessToken()\n  .then(function(data) {\n    console.log('The access token has been refreshed!');\n\n    // Save the access token so that it's used in future calls\n    spotifyApi.setAccessToken(data.body['access_token']);\n  }, function(err) {\n    console.log('Could not refresh access token', err);\n  });\n```\n\n#### Client Credential flow\n\nThe Client Credential flow doesn't require the user to give permissions, so it's suitable for requests where the application just needs to authenticate itself. This is the case with for example retrieving a playlist. However, note that the access token cannot be refreshed, and that it isn't connected to a specific user.\n\n```javascript\nvar clientId = 'someClientId',\n    clientSecret = 'someClientSecret';\n\n// Create the api object with the credentials\nvar spotifyApi = new SpotifyWebApi({\n  clientId : clientId,\n  clientSecret : clientSecret\n});\n\n// Retrieve an access token.\nspotifyApi.clientCredentialsGrant()\n  .then(function(data) {\n    console.log('The access token expires in ' + data.body['expires_in']);\n    console.log('The access token is ' + data.body['access_token']);\n\n    // Save the access token so that it's used in future calls\n    spotifyApi.setAccessToken(data.body['access_token']);\n  }, function(err) {\n        console.log('Something went wrong when retrieving an access token', err);\n  });\n```\n\n#### Setting credentials\n\nCredentials are either set when constructing the API object or set after the object has been created using setters. They can be set all at once or one at a time.\n\nUsing setters, getters and resetters.\n```javascript\n// Use setters to set all credentials one by one\nvar spotifyApi = new SpotifyWebApi();\nspotifyApi.setAccessToken('myAccessToken');\nspotifyApi.setRefreshToken('myRefreshToken');\nspotifyApi.setRedirectURI('http://www.example.com/test-callback');\nspotifyApi.setClientId('myOwnClientId');\nspotifyApi.setClientSecret('someSuperSecretString');\n\n// Set all credentials at the same time\nspotifyApi.setCredentials({\n  'accessToken' : 'myAccessToken',\n  'refreshToken' : 'myRefreshToken',\n  'redirectUri' : 'http://www.example.com/test-callback',\n  'clientId ' : 'myClientId',\n  'clientSecret' : 'myClientSecret'\n});\n\n// Get the credentials one by one\nconsole.log('The access token is ' + spotifyApi.getAccessToken());\nconsole.log('The refresh token is ' + spotifyApi.getRefreshToken());\nconsole.log('The redirectURI is ' + spotifyApi.getRedirectURI());\nconsole.log('The client ID is ' + spotifyApi.getClientId());\nconsole.log('The client secret is ' + spotifyApi.getClientSecret());\n\n// Get all credentials\nconsole.log('The credentials are ' + spotifyApi.getCredentials());\n\n// Reset the credentials\nspotifyApi.resetAccessToken();\nspotifyApi.resetRefreshToken();\nspotifyApi.resetRedirectURI();\nspotifyApi.resetClientId();\nspotifyApi.resetClientSecret();\nspotifyApi.resetCode();\n\n// Reset all credentials at the same time\nspotifyApi.resetCredentials();\n```\n\nUsing the constructor.\n```javascript\n// Set necessary parts of the credentials on the constructor\nvar spotifyApi = new SpotifyWebApi({\n  clientId : 'myClientId',\n  clientSecret : 'myClientSecret'\n});\n\n// Get an access token and 'save' it using a setter\nspotifyApi.clientCredentialsGrant()\n  .then(function(data) {\n    console.log('The access token is ' + data.body['access_token']);\n    spotifyApi.setAccessToken(data.body['access_token']);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n```javascript\n// Set the credentials when making the request\nvar spotifyApi = new SpotifyWebApi({\n  accessToken : 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'\n});\n\n// Do search using the access token\nspotifyApi.searchTracks('artist:Love')\n  .then(function(data) {\n    console.log(data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n```javascript\n// Set the credentials when making the request\nvar spotifyApi = new SpotifyWebApi({\n  accessToken : 'njd9wng4d0ycwnn3g4d1jm30yig4d27iom5lg4d3'\n});\n\n// Get tracks in a playlist\napi.getPlaylistTracks('thelinmichael', '3ktAYNcRHpazJ9qecm3ptn', { 'offset' : 1, 'limit' : 5, 'fields' : 'items' })\n  .then(function(data) {\n    console.log('The playlist contains these tracks', data.body);\n  }, function(err) {\n    console.log('Something went wrong!', err);\n  });\n```\n\n\n## Development\n\nSee something you think can be improved? [Open an issue](https://github.com/thelinmichael/spotify-web-api-node/issues/new) or clone the project and send a pull request with your changes.\n\n### Running tests\n\nYou can run the unit tests executing `mocha` and get a test coverage report running `mocha -r blanket -R html-cov > coverage.html`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thelinmichael/spotify-web-api-node.git"
  },
  "scripts": {
    "coveralls": "mocha -r blanket -R mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js",
    "lint": "grunt jshint",
    "test": "npm run lint && ./node_modules/.bin/mocha --bail"
  },
  "version": "3.0.0"
}
