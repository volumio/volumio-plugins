pcm.volumioDsp {
  type plug
  slave {
    pcm "toDsp"
    format "S32_LE"  # Whatever input format BruteFIR wants, or "unchanged" to use the original format of the audio stream
    channels "unchanged"   # Whatever input channel count BruteFIR wants, or "unchanged" to use the original channel count of the audio stream
    rate "unchanged"   # Whatever input rate BruteFIR wants, or "unchanged" to use the original rate of the audio stream
#    period_time INT # Period time in us or "unchanged" string - I wouldn't set or mess with this unless you see underrun issues
#    buffer_time INT # Buffer time in us or "unchanged" string - I wouldn't set or mess with this unless you see underrun issues
    }
}
# This PCM is used to send the audio to BruteFIR.
# It uses the Loopback,0,5 interface as an output so
# that BruteFIR can read the incoming audio from
# Loopback,1,5 (using the rate/format/channels as
# defined in volumioDsp)
pcm.toDsp {
   type hw
   card "Loopback"
  #device 1
  #subdevice 0
}
# This PCM is used as the output by BruteFIR.
# It isn't technically necessary, but it makes
# it clear where the BruteFIR audio is supposed
# to go, and passes it back to Volumio.
# Note that this assumes that the BruteFIR
# output is using Linear samples (e.g. S16_LE,
# S24_LE, S32_LE etc). If not then a different
# plugin must be used to convert to linear, e.g.
# lfloat if the incoming audio is FLOAT format.
pcm.fromDsp1 {
  type plug 
slave {
    pcm "fromDsp"
    format "S32_LE"  # Whatever input format BruteFIR wants, or "unchanged" to use the original format of the audio stream
    channels "unchanged"   # Whatever input channel count BruteFIR wants, or "unchanged" to use the original channel count of the audio stream
    rate "unchanged" 
  }
}
pcm.fromDsp {
  type copy
  slave.pcm "postDsp"
}