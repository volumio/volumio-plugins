{
  "_args": [
    [
      {
        "raw": "eiscp@github:orderoftheflame/node-eiscp",
        "scope": null,
        "escapedName": "eiscp",
        "name": "eiscp",
        "rawSpec": "github:orderoftheflame/node-eiscp",
        "spec": "github:orderoftheflame/node-eiscp",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:orderoftheflame/node-eiscp.git",
          "sshUrl": "git+ssh://git@github.com/orderoftheflame/node-eiscp.git",
          "httpsUrl": "git+https://github.com/orderoftheflame/node-eiscp.git",
          "gitUrl": "git://github.com/orderoftheflame/node-eiscp.git",
          "shortcut": "github:orderoftheflame/node-eiscp",
          "directUrl": "https://raw.githubusercontent.com/orderoftheflame/node-eiscp/master/package.json"
        }
      },
      "/home/volumio/volumio-plugins/plugins/miscellanea/onkyo_control"
    ]
  ],
  "_from": "orderoftheflame/node-eiscp",
  "_id": "eiscp@0.0.1",
  "_inCache": true,
  "_location": "/eiscp",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eiscp@github:orderoftheflame/node-eiscp",
    "scope": null,
    "escapedName": "eiscp",
    "name": "eiscp",
    "rawSpec": "github:orderoftheflame/node-eiscp",
    "spec": "github:orderoftheflame/node-eiscp",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:orderoftheflame/node-eiscp.git",
      "sshUrl": "git+ssh://git@github.com/orderoftheflame/node-eiscp.git",
      "httpsUrl": "git+https://github.com/orderoftheflame/node-eiscp.git",
      "gitUrl": "git://github.com/orderoftheflame/node-eiscp.git",
      "shortcut": "github:orderoftheflame/node-eiscp",
      "directUrl": "https://raw.githubusercontent.com/orderoftheflame/node-eiscp/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/orderoftheflame/node-eiscp.git#84854dc95c6d82710117744017796f77bea42bc1",
  "_shasum": "8b0ae800d2afa2d4085937f921fa5bbd8f2b095c",
  "_shrinkwrap": null,
  "_spec": "eiscp@github:orderoftheflame/node-eiscp",
  "_where": "/home/volumio/volumio-plugins/plugins/miscellanea/onkyo_control",
  "bugs": {
    "url": "https://github.com/tillbaks/node-eiscp/issues"
  },
  "dependencies": {
    "async": "*",
    "js-yaml": "*"
  },
  "description": "interface to onkyo receivers / eiscp protocol",
  "devDependencies": {},
  "gitHead": "84854dc95c6d82710117744017796f77bea42bc1",
  "homepage": "https://github.com/tillbaks/node-eiscp#readme",
  "keywords": [
    "onkyo",
    "eiscp",
    "iscp"
  ],
  "license": "MIT License",
  "main": "eiscp.js",
  "name": "eiscp",
  "optionalDependencies": {},
  "readme": "## node-eiscp\n\nThis is a node module to control and interact with Onkyo receivers over the network.\n\nBasically it is a merge of my previous module which was really simple and https://github.com/miracle2k/onkyo-eiscp translated to javascript, which means a lot more features but some stuff still missing like handling multiple receivers and special commands (ranges are supported though).\n\n### How to use it?\n\n#### Until first release you can add the git url to your package.json like this\n\n```\n{\n  \"dependencies\": {\n    \"eiscp\": \"git://github.com/tillbaks/node-eiscp.git\"\n  }\n}\n```\n\n#### See the examples\nhttps://github.com/tillbaks/node-eiscp/tree/master/examples\n\n### Command syntax\n\nSame syntax as https://github.com/miracle2k/onkyo-eiscp thanks dude!\n\nSee example 3.js to retreive an array of all available commands\n\nA command consists of three parts: The zone, the command, and the arguments.\nHere are some examples::\n\n    system-power=on\n    zone2.power=on\n    main.balance=3\n\nAs you can see, the basic format is::\n\n    zone.command=argument\n\nIf you do not specify a zone, then ``main`` is assumed.\n\nThere are some variations on this syntax that are possible, for example the\nfollowing are all equivalent::\n\n    power on\n    power:on\n    main.power on\n    main power on\n\nIn other words, instead of the ``.`` and ``=`` separators, whitespace may\nbe used, and the colon ``:`` is an alternative to ``=``. However, it's best\nto use the suggested syntax above.\n\n### Events\n\nYou will to listen to events to use this module.\n\n#### .on(command, callback)\n\nData from connected receiver.\n\n**command:** _(string)_ - Any supported command like \"volume\" or \"system-power\"\n\n**callback:** _(function)_ - One argument containing the result of the command. If command is volume you would get the volume as a number.\n\n#### .on(\"data\")\n\nData from connected receiver.\n\n**data:**\n- command _(string|array)_ - (array if command has aliases) contains the high-level command\n- argument _(string)_ - string contains the high-level argument\n- iscp_command _(string)_ - string contains the low-level command\n\n#### .on(\"connect\")\n\nWill fire when connected.\n\n#### .on(\"close\")\n\nWill fire when disconnected.\n\n#### .on(\"error\")\n\nWill fire when error is encountered.\n\n**message:** _(string)_ - contains an error message\n\n#### .on(\"debug\")\n\nWill fire when debug message is encountered. Use this when developing, you will get useful messages for debugging.\n\n**message:** _(string)_ - contains a debug message\n\n### API\n\n#### connect ([ options ])\n\nIf you only have one receiver on your network there is no need to provide any options, it will be discovered automatically.\n\n**options:**\n\n- `host` _(default: undefined)_ - Hostname or IP of receiver\n- `port` _(default: 60128)_ - Port of receiver\n- `reconnect` _(default: true)_ - Reconnect to receiver if connection is lost\n- `reconnect_sleep` _(default: 5)_ - Time in seconds between reconnection attempts\n- `verify_commands` _(default: true)_ - Whether to verify high-level commands for model compatibility\n\n#### discover (options, callback)\n\nSends a broadcast packet and waits for response\n\n**options:**\n\n- `address` _(default: \"255.255.255.255\")_ - Hostname or IP of receiver\n- `port` _(default: 60128)_ - Listening port **(NOTE: try changing this if you have trouble connecting)**\n- `timeout` _(default: 2)_ - Time in seconds to wait for respoonses after broadcast is sent\n\n**callback:** _(function)_ - You will receive one argument cointaining an array of devices\n\n- `devices` _(array)_ - An array of objects\n  - `host` - Receiver IP\n  - `port` - Receiver Port\n  - `model` - Receiver Model\n  - `areacode` - Area Code?\n  - `message` - Raw message that was received\n\n\n#### raw (data [, callback])\n\nSends a low-level command like _PWR01_ or _MVL1A_\n\n**data:** _(string)_ - Command to send\n\n**callback:**\n\nNOTE: Callback does not tell you if the command was successfull only that it was sent to the receiver.\n\n- `result` _(object)_\n  - `result` - `true` or `false` if command was sent to receiver\n  - `msg` - If there is a message attached to the result\n\n\n#### command (command [, callback])\n\nSends a high-level command like **system-power=query** or **zone2.volume=1A**\nmore info about command syntax can be found above the API\n\n**command:** _(string)_ - Command to send\n\n**callback:**\n\nNOTE: Callback does not tell you if the command was successfull only that it was sent to the receiver.\n\n- `result` _(object)_\n  - `result` - _true_ or _false_ if command was sent to receiver\n  - `msg` - If there is a message attached to the result\n\n\n#### get_commands (zone, callback)\n\nRetreives an array of all commands in the provided zone\n\n**zone:** _(string)_ - zone can be \"main\", \"zone2\" etc..\n\n**callback:**\n\n- `commands` _(array)_ - Array of all commands\n\n\n#### get_command (command, callback)\n\nRetreives an array of all arguments in the provided command\n\n**command:** _(string)_ - command can be \"system-power\", \"zone2.volume\" etc.. (NOTE: If you don't specify zone \"main\" will be assumed)\n\n**callback:**\n\n- `arguments` _(array)_ - Array of all arguments\n\n\n### Info about yaml/json commands stuff\n\nAll commands are in a json file \"eiscp-commands.json\" and are converted from a YAML file from https://github.com/miracle2k/onkyo-eiscp thanks dude!\n\n###### Download YAML file:\n```\nwget https://raw.github.com/miracle2k/onkyo-eiscp/master/eiscp-commands.yaml\n```\n\n###### Convert YAML file to json:\nRun in node-eiscp directory. This will create \"eiscp-commands.json\". Warning this script might be badly coded. [:\n```\nnode eiscp-commands-convert.js\n```\n\n### Changes\n\n* (owagner) added new option \"verify_commands\", defaulting to true, which yields the previous behavior: High-level\n  commands are verified for model compatibility, and rejected otherwise. Although in theory a good idea, this makes\n  high-level commands unusable for new models which are not yet presented in the yaml file or for which no Onkyo\n  documentation is available yet (as the time of this writing, for example, the latest V 1.26 .xls does not cover\n  the NR535)\n* (owagner) change \"reconnect\" property to default to true, to match documentation\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tillbaks/node-eiscp.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.1"
}
