{
  "_args": [
    [
      {
        "raw": "simple-lastfm",
        "scope": null,
        "escapedName": "simple-lastfm",
        "name": "simple-lastfm",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/volumio"
    ],
    [
      {
        "raw": "simple-lastfm@https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
        "scope": null,
        "escapedName": "simple-lastfm",
        "name": "simple-lastfm",
        "rawSpec": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
        "spec": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
        "type": "remote"
      },
      "/home/volumio/volumio-plugins/plugins/miscellanea/lastfm"
    ]
  ],
  "_from": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
  "_id": "simple-lastfm@1.0.6",
  "_inCache": true,
  "_location": "/simple-lastfm",
  "_npmUser": {
    "name": "atomjack",
    "email": "atomjack@gmail.com"
  },
  "_npmVersion": "1.2.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "simple-lastfm@https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
    "scope": null,
    "escapedName": "simple-lastfm",
    "name": "simple-lastfm",
    "rawSpec": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
    "spec": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
  "_shasum": "12310a523f2f840381289aefef159fec6db7ae66",
  "_shrinkwrap": null,
  "_spec": "simple-lastfm@https://github.com/Saiyato/simple-lastfm/tarball/71414e867ee261d5362929d14ceb8c1c2d06748f",
  "_where": "/home/volumio/volumio-plugins/plugins/miscellanea/lastfm",
  "author": {
    "name": "Chris Bellew",
    "email": "atomjack@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/atomjack/simple-lastfm/issues"
  },
  "dependencies": {
    "crypto": ">= 0.0.3",
    "jquery": ">= 1.6.3",
    "querystring": ">= 0.1.0",
    "xml2js": ">= 0.1.13"
  },
  "description": "simple last.fm api for node.js",
  "devDependencies": {},
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "12310a523f2f840381289aefef159fec6db7ae66",
    "tarball": "https://registry.npmjs.org/simple-lastfm/-/simple-lastfm-1.0.5.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/atomjack/simple-lastfm#readme",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "atomjack",
      "email": "atomjack@gmail.com"
    }
  ],
  "name": "simple-lastfm",
  "optionalDependencies": {},
  "readme": "#Simple-Lastfm\n\nA simple nodejs library to interface with the last.fm API\n\n## Installation\n    npm install simple-lastfm\n\n## Examples\n\nFirst, you'll need to get an API key from last.fm: [http://www.last.fm/api/account](http://www.last.fm/api/account).\n\nOnce you have your API key and API secret, you'll need to generate a session key, after which you can then start to scrobble:\n\n```js\nvar Lastfm = require('simple-lastfm');\n\nvar lastfm = new Lastfm({\n\tapi_key: 'xxx',\n\tapi_secret: 'xxx',\n\tusername: 'xxx',\n\tpassword: 'xxx'\n});\n\nlastfm.getSessionKey(function(result) {\n\tconsole.log(\"session key = \" + result.session_key);\n\tif(result.success) {\n\t\tlastfm.scrobbleNowPlayingTrack({\n\t\t\tartist: 'Ratatat',\n\t\t\ttrack: 'Seventeen Years',\n\t\t\tcallback: function(result) {\n\t\t\t\tconsole.log(\"in callback, finished: \", result);\n\t\t\t}\n\t\t});\n\t\tlastfm.scrobbleTrack({\n\t\t\tartist: 'Bonobo',\n\t\t\ttrack: 'Black Sands',\n\t\t\tcallback: function(result) {\n\t\t\t\tconsole.log(\"in callback, finished: \", result);\n\t\t\t}\n\t\t});\n\t\tlastfm.loveTrack({\n\t\t\tartist: 'Electrelane',\n\t\t\ttrack: 'Suitcase',\n\t\t\tcallback: function(result) {\n\t\t\t\tconsole.log(\"in callback, finished: \", result);\n\t\t\t}\n\t\t});\n\t\tlastfm.unloveTrack({\n\t\t\tartist: 'something crap',\n\t\t\ttrack: 'no thanks',\n\t\t\tcallback: function(result) {\n\t\t\t\tconsole.log(\"in callback, finished: \", result);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconsole.log(\"Error: \" + result.error);\n\t}\n});\n```\n\n#Documentation\n\n### init ( options )\noptions must be an object with the following required keys:\n\n* `api_key`\n* `api_secret`\n* `username`\n* `password`\n\nOptional parameters:\n\n* `session_key`\n* `debug`\n\nI recommend you save the session key and reuse it when possible. Debug should be true or false. By default it is false. Set it to true to have some console commands outputted.\n\n### getSessionKey ( callback )\ncallback: A function which receives a single object. On success, this object looks like:\n\n```js\n\t{\n\t\tsuccess: true,\n\t\tsession_key: 'xxx'\n\t}\n```\n\nOn failure:\n\n```js\n\t{\n\t\tsuccess: false,\n\t\terror: 'A text description of the error from last.fm'\n\t}\n```\n\nNote:Right now \nWhen a session key is successfully received, it automatically gets saved into the lastfm instance (in the above code, you could access it as lastfm.session_key)\n\n\n### scrobbleTrack ( options )\nRequired parameters:\n\n* `artist`\n* `track`\n\nOptional parameters:\n\n* `callback`: A function which receives a single object, of the form { success: true|false[, error: 'text description of the error']}.\n* `timestamp`: The timestamp for this scrobble. If omitted, uses the current date/time. Use number of seconds (NOT milliseconds!) since the UNIX epoch.\n\n### loveTrack (options)\nRequired parameters:\n\n* `artist`\n* `track`\n\nOptional parameters:\n\n* `callback`: A function which receives a single object, of the form { success: true|false[, error: 'text description of the error']}.\n\n### unloveTrack (options)\nRequired parameters:\n\n* `artist`\n* `track`\n\nOptional parameters:\n\n* `callback`: A function which receives a single object, of the form { success: true|false[, error: 'text description of the error']}.\n\n### getArtistInfo (options)\nRequired parameters:\n\n* `artist`\n\nOptional parameters:\n\n* `callback`: A function which receives a single object, of the form { success: true|false[, artistInfo: {}, error: 'text description of the error']}.\n\n### getTrackInfo (options)\nRequired parameters:\n\n* `artist`\n* `track`\n\nOptional parameters:\n\n* `callback`: A function which receives a single object, of the form { success: true|false[, trackInfo: {}, error: 'text description of the error']}.\n\n### getTags (options)\nRequired parameters:\n\n* `artist`\n\nOptional parameters:\n\n* `track`\n* `callback`: A function which receives a single object, of the form { success: true|false[, tags: {}, error: 'text description of the error']}.\n\n### getPlays (options)\nRequired parameters:\n\n* `artist`\n\nOptional parameters:\n\n* `track`: The name of the track. If ommitted, method will return number of artist plays.\n* `callback`: A function which receives a single object, of the form { success: true|false[, plays: #, error: 'text description of the error']}.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/atomjack/simple-lastfm.git"
  },
  "version": "1.0.6"
}
